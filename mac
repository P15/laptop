#!/bin/sh
set -eou pipefail

# Welcome to the recombine laptop script - adapated from thoughtbot
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      shell_path="$(which zsh)"
      # In case the shell is not added to the list of shells
      if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
        fancy_echo "Adding '$shell_path' to /etc/shells"
        sudo sh -c "echo $shell_path >> /etc/shells"
      fi
      chsh -s "$shell_path"

    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    rbenv rehash
  fi
}

pip_install_or_upgrade() {
  if pip list | grep "$1" > /dev/null; then
    fancy_echo "Upgrading pip package $1"
    pip install --upgrade "$1" > /dev/null
  else
    pip install "$1"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew tap Homebrew/bundle

brew bundle --file=- <<EOF
tap 'caskroom/cask'
tap 'homebrew/services'

brew 'git'
brew 'git-lfs'
brew 'openssl'
brew 'libyaml'                              # should come after openssl
cask 'java'
brew 'zsh'
brew 'postgres', restart_service: :changed
brew 'the_silver_searcher'
brew 'reattach-to-user-namespace'
brew 'imagemagick'
brew 'node'
brew 'readline'
brew 'rbenv'
brew 'ruby-build'
brew 'phantomjs'
brew 'sbt'
brew 'mysql', restart_service: :changed
brew 'jq'
brew 'python'                               # for pip to install awscli
brew 'parallel'
brew 'gpg2'
brew 'nvm'
brew 'heroku-toolbelt'

# Useful apps
cask 'google-chrome'
cask 'slack'
cask 'docker-toolbox'
cask 'disk-inventory-x'
cask 'atom'
cask 'gpgtools'

EOF

pip_install_or_upgrade 'pip'
pip_install_or_upgrade 'awscli'
pip_install_or_upgrade 'ebcli'

node_version="0.10"

# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash zsh)"' 1

ruby_version="2.1.3"
RBENV_VERSION="$ruby_version"

eval "$(rbenv init - zsh)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"

gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

if ! docker-machine ls | grep -Fq "default"; then
  fancy_echo "Creating a local virtual machine for docker. Its name is 'default'. Its disk size is 80GB."
  # We need around 80 GB for docker's virtual machine because our dev databases are so big
  docker-machine create --driver virtualbox --virtualbox-disk-size "80000" default
else
  fancy_echo "A docker-machine named 'default' already exists. Skipping ..."
fi
